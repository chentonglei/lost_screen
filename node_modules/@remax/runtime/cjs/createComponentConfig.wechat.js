"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var framework_shared_1 = require("@remax/framework-shared");
var Container_1 = __importDefault(require("./Container"));
var render_1 = __importDefault(require("./render"));
function createComponentConfig(Component) {
    var config = {
        options: {
            styleIsolation: 'apply-shared',
        },
        data: {
            action: {},
            root: {
                children: [],
            },
        },
        attached: function () {
            // 在组件实例进入页面节点树时执行
            if (!this.container) {
                this.init();
            }
        },
        detached: function () {
            // 在组件实例被从页面节点树移除时执行
            this.container.clearUpdate();
            render_1.default(null, this.container);
        },
        /*
        TODO: 当前微信无对应语法支持监听props
              且必须显示设定 properties，才能在组件中使用 this.properties.name
              所以当前的实现不支持在微信端 props
        eg:
        properties: {
          name: String
        },
    
        didUpdate(prevProps: any, prevData: any) {
          if (prevData !== this.data) {
            return;
          }
    
          this.render();
        },*/
        methods: {
            init: function () {
                this.component = framework_shared_1.RuntimeOptions.get('pluginDriver').onMiniComponent({
                    component: Component,
                    context: this,
                });
                this.container = new Container_1.default(this);
                this.render();
            },
            render: function () {
                this.element = render_1.default(React.createElement(framework_shared_1.ComponentInstanceContext.Provider, {
                    value: this,
                }, React.createElement(this.component, this.properties)), this.container);
            },
        },
    };
    return config;
}
exports.default = createComponentConfig;

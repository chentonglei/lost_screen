"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRenderOptions = void 0;
const lodash_1 = require("lodash");
const ejs_1 = __importDefault(require("ejs"));
const build_store_1 = __importDefault(require("@remax/build-store"));
const shared_1 = require("@remax/shared");
const getUsingComponents_1 = require("../getUsingComponents");
const path_1 = __importDefault(require("path"));
function createRenderOptions(componentPath, compilation, options) {
    const components = new Map(build_store_1.default.getCollectedComponents());
    getUsingComponents_1.getUsingComponents(componentPath, compilation, options).forEach(component => {
        components.set(component.id, {
            id: component.id,
            props: component.props,
            type: 'native',
        });
    });
    return {
        components,
        skipComponents: build_store_1.default.skipHostComponents,
        slotView: {
            props: [...new Set(build_store_1.default.slotView.props || [])].sort(),
        },
    };
}
exports.createRenderOptions = createRenderOptions;
async function createComponentTemplate(component, options, meta, compilation, cache) {
    const fileName = shared_1.slash(`${component.name}${meta.template.extension}`);
    let baseTemplate = `/base${meta.template.extension}`;
    // 如果是组件构建，生成相对路径
    if (component.builder.buildType === 'minicomponent') {
        baseTemplate = shared_1.slash(path_1.default.relative(path_1.default.dirname('./' + fileName), '.' + baseTemplate));
    }
    const ejsOptions = Object.assign(Object.assign({}, createRenderOptions(component.filename, compilation, options)), { renderIsolatedTemplates: false, baseTemplate,
        sortBy: lodash_1.sortBy });
    let source = await ejs_1.default.renderFile(meta.ejs.page, ejsOptions, {
        rmWhitespace: options.compressTemplate,
    });
    /* istanbul ignore next */
    if (options.compressTemplate) {
        source = source.replace(/^\s*$(?:\r\n?|\n)/gm, '').replace(/\r\n|\n/g, ' ');
    }
    cache.invalid(fileName, source, () => {
        compilation.assets[fileName] = {
            source: () => source,
            size: () => Buffer.byteLength(source),
        };
    });
}
exports.default = createComponentTemplate;
